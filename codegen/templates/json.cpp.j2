// *** AUTOGENERATED â€“ DO NOT EDIT (run: python codegen/generate.py) ***

#include "json.hpp"
#include <sstream>

{% set ns_parts = protocol.split('_') %}
{% if ns_parts|length > 1 %}
namespace {{ ns_parts[0] }} { namespace {{ ns_parts[1] }} { namespace v{{ version }} {
{% else %}
namespace {{ protocol }} { namespace v{{ version }} {
{% endif %}

static inline std::string json_escape(std::string_view s) {
    std::ostringstream os; os << '"';
    for (unsigned char c : s) {
        if (c == '"' || c == '\\') { os << '\\' << c; }
        else if (c >= 0x20) { os << c; }
    }
    os << '"';
    return os.str();
}

{% for msg in model.messages %}
std::string to_json(const {{ msg.name }}& m) {
    std::ostringstream os;
    os << "{";
    bool first = true;
    {% for f in msg.fields %}
    if (!first) os << ","; first = false;
    os << '"' << "{{ f.name }}" << '"' << ":";
    {% if f.type in ['u8','u16','u32','u64'] %}
    os << +m.{{ f.name }};
    {% elif f.type == 'enum' %}
    os << +static_cast<{{ model.enums_map[f.enum_type].underlying }}>(m.{{ f.name }});
    {% elif f.type == 'char' and f.size == 1 %}
    os << json_escape(std::string_view(&m.{{ f.name }}, 1));
    {% elif f.type == 'char' and f.size > 1 %}
    os << json_escape(std::string_view(m.{{ f.name }}.data(), {{ f.size }}));
    {% else %}
    os << '"' << "<bin>" << '"';
    {%- endif %}
    {% endfor %}
    {% for g in msg.groups %}
    os << "," << '"' << "{{ g.vector_name }}" << '"' << ":" << "[";
    for (size_t __i = 0; __i < m.{{ g.vector_name }}.size(); ++__i) {
        if (__i) os << ",";
        const auto& it = m.{{ g.vector_name }}[__i];
        os << "{";
        bool gfirst = true;
        {% for gf in g.fields %}
        if (!gfirst) os << ","; gfirst = false;
        os << '"' << "{{ gf.name }}" << '"' << ":";
        {% if gf.type in ['u8','u16','u32','u64'] %}
        os << +it.{{ gf.name }};
        {% elif gf.type == 'enum' %}
        os << +static_cast<{{ model.enums_map[gf.enum_type].underlying }}>(it.{{ gf.name }});
        {% elif gf.type == 'char' and gf.size == 1 %}
        os << json_escape(std::string_view(&it.{{ gf.name }}, 1));
        {% elif gf.type == 'char' and gf.size > 1 %}
        os << json_escape(std::string_view(it.{{ gf.name }}.data(), {{ gf.size }}));
        {% else %}
        os << '"' << "<bin>" << '"';
        {% endif %}
        {% endfor %}
        os << "}";
    }
    os << "]";
    {% endfor %}
    os << "}";
    return os.str();
}

bool from_json(const std::string&, {{ msg.name }}&) { return false; }

{% endfor %}

{% if ns_parts|length > 1 %}
}  // namespace v{{ version }}
}  // namespace {{ ns_parts[1] }}
}  // namespace {{ ns_parts[0] }}
{% else %}
}  // namespace v{{ version }}
}  // namespace {{ protocol }}
{% endif %}
