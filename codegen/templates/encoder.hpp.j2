// *** AUTOGENERATED â€“ DO NOT EDIT (run: python codegen/generate.py) ***

#pragma once

#include "runtime/config.hpp"
#include "messages.hpp"
#include "runtime/status.hpp"
#include "runtime/endian.hpp"
#include <cstddef>
#include <cstdint>
#include <cstring>

{%- set ns_parts = protocol.split('_') %}
{%- if ns_parts|length > 1 %}

namespace {{ ns_parts[0] }} { namespace {{ ns_parts[1] }} { namespace v{{ version }} {
{%- else %}

namespace {{ protocol }} { namespace v{{ version }} {
{%- endif %}

// Encoder for {{ protocol }} v{{ version }}
class Encoder {
public:
{%- for msg in model.messages %}
    static market::runtime::status encode(const {{ msg.name }}& m, uint8_t* out, size_t out_sz, size_t& written);
{%- endfor %}
};

{%- if ns_parts|length > 1 %}
}  // namespace v{{ version }}
}  // namespace {{ ns_parts[1] }}
}  // namespace {{ ns_parts[0] }}
{%- else %}
}  // namespace v{{ version }}
}  // namespace {{ protocol }}
{%- endif %}
