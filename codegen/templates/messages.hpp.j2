// *** AUTOGENERATED â€“ DO NOT EDIT (run: python codegen/generate.py) ***

#pragma once

#include "runtime/config.hpp"
#include <cstddef>
#include <cstdint>
#include <array>
#include <vector>
#include <optional>
#include <string_view>

{%- set ns_parts = protocol.split('_') %}
{%- if ns_parts|length > 1 %}

namespace {{ ns_parts[0] }} { namespace {{ ns_parts[1] }} { namespace v{{ version }} {
{%- else %}

namespace {{ protocol }} { namespace v{{ version }} {
{%- endif %}

{%- if model.enums %}

// Enums
{% for enum in model.enums %}
enum class {{ enum.name }} : {{ enum.underlying }} {
{%- for value_name, value_num in enum["values"].items() %}
    {{ value_name }} = {{ value_num }},
{%- endfor %}
};

{% endfor %}
{%- endif %}

{%- if model.messages %}

// Group structures
{% for msg in model.messages %}
{%- if msg.groups %}
{%- for group in msg.groups %}
struct {{ msg.name }}{{ group.name }} {
{%- for field in group.fields %}
    {{ field.cxx_type }} {{ field.name }}{};
{%- endfor %}
};

{% endfor %}
{%- endif %}
{% endfor %}

// Message structures
{% for msg in model.messages %}
struct {{ msg.name }} {
{%- for field in msg.fields %}
    {{ field.cxx_type }} {{ field.name }}{};
{%- endfor %}
{%- if msg.groups %}
{%- for group in msg.groups %}
    std::vector<{{ msg.name }}{{ group.name }}> {{ group.vector_name }};
{%- endfor %}
{%- endif %}
};

{% endfor %}
{%- endif %}

{%- if ns_parts|length > 1 %}
}  // namespace v{{ version }}
}  // namespace {{ ns_parts[1] }}
}  // namespace {{ ns_parts[0] }}
{%- else %}
}  // namespace v{{ version }}
}  // namespace {{ protocol }}
{%- endif %}
